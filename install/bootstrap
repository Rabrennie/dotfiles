#! /bin/bash

set -euo pipefail
IFS=$'\n\t'

DOTFILES=$(pwd -P)
DEPENDENCIES="$DOTFILES/dependencies"

source "$DOTFILES/install/helpers"

mkdir -p "$DEPENDENCIES"

# install xcode tools
if [[ ! -d $(xcode-select -p) ]]; then
    info 'installing xcode tools'
    xcode-select --install
    success 'installed xcode tools'
else
    success 'xcode tools already installed'
fi

# Install homebrew
if [[ ! -f $(which brew) ]]; then
    info 'installing homebrew'
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    success 'installed homebrew'
else
    success 'Homebrew already installed'
fi

info 'installing tools'
brew install bat eza fzf nvm jq ripgrep starship findutils neovim tmux
brew install --cask karabiner-elements
brew install --cask wezterm
brew install --cask --no-quarantine alacritty

if [ -d "$DEPENDENCIES/alacritty" ]; then
    (cd "$DEPENDENCIES/alacritty" && git pull)
else
    git clone https://github.com/alacritty/alacritty.git "$DEPENDENCIES/alacritty"
fi

(cd "$DEPENDENCIES/alacritty" && sudo tic -xe alacritty,alacritty-direct extra/alacritty.info)

/bin/bash -c "$(brew --prefix)/opt/fzf/install --no-update-rc --completion --key-bindings"

# if [ -d "$DEPENDENCIES/fzf-tab" ]; then
#     (cd "$DEPENDENCIES/fzf-tab" && git pull)
# else
#     git clone https://github.com/Aloxaf/fzf-tab "$DEPENDENCIES/fzf-tab"
# fi
#
# if [ -d "$DEPENDENCIES/fzf-tab" ]; then
#     (cd "$DEPENDENCIES/fzf-tab" && git pull)
# else
#     git clone https://github.com/Aloxaf/fzf-tab "$DEPENDENCIES/fzf-tab"
# fi

# install TPM
if [ -d "$HOME/.tmux/plugins/tpm" ]; then
    (cd "$HOME/.tmux/plugins/tpm" && git pull)
else
    mkdir -p "$HOME/.tmux/plugins"
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

success 'installed tools'

# info 'installing fonts'
# brew tap homebrew/cask-fonts
# brew install --cask font-jetbrains-mono-nerd-font
# success 'installed fonts'

link_file() {
    info "linking $1 to $2"

    if [[ -f "$2" && ! -L "$2" ]]; then
        BACKUP="$2.$(date +%s).bak"
        mv "$2" "$BACKUP"
        success "moved $2 to $BACKUP"
    fi

    if [ ! -L "$2" ]; then
        ln -s "$1" "$2"
    fi

    success "linked $1 to $2"
}

install_dotfiles() {
    info 'installing dotfiles'

    while read -r linkfile; do
        while read -r line; do
            local src dst dir
            src=$(eval echo "$line" | cut -d '=' -f 1)
            dst=$(eval echo "$line" | cut -d '=' -f 2)
            dir=$(dirname "$dst")

            echo "src: $src"
            echo "dst: $dst"
            echo "dir: $dir"

            mkdir -p "$dir"
            link_file "$src" "$dst"
        done <"$linkfile"
    done < <(find -H "$DOTFILES" -maxdepth 2 -name 'links.prop' -not -path '*.git*')
}

create_env_file() {
    if test -f "$HOME/.env.sh"; then
        success "$HOME/.env.sh file already exists, skipping"
    else
        echo "export DOTFILES=$DOTFILES" >"$HOME/.env.sh"
        success 'created ~/.env.sh'
    fi
}

create_env_file
install_dotfiles

info "Setting up nvim"

rm -rf "$HOME/.config/nvim"
link_file "$DOTFILES/nvim" "$HOME/.config/nvim"
